{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "vm": {
            "defaultValue": {
                "location": "eastus",
                "name": "linux-VM",
                "size": "Standard_B1ms",
                "storage": "Premium_LRS"
            },
            "type": "object"
        },
        "image": {
            "defaultValue": {
                "sku": "20.04",
                "version": "latest",
                "offer": "Ubuntu",
                "publisher": "Canonical"
            },
            "metadata": {
                "description": "image property is expected to have either id or publisher/offer/sku/version"
            },
            "type": "object"
        },
        "network": {
            "defaultValue": {
                "vnet": "CF-Default-VNet",
                "subnet": "Web",
                "resourceGroup": "profile-network-rg",
                "interfaceSuffix": "-nic"
            },
            "type": "object"
        },
        "publicIp": {
            "defaultValue": {
                "addressSuffix": "-IP",
                "addressType": "Static",
                "addressSku": "Basic",
                "addressDns": ""
            },
            "type": "object"
        },
        "user": {
            "defaultValue": "cfadmin",
            "type": "string"
        },
        "password": {
            "defaultValue": "",
            "type": "string"
        },
        "sshKeys": {
            "defaultValue": "",
            "type": "array"
        },
        "disablePasswordAuthentication": {
            "defaultValue": true,
            "type": "bool"
        },
        "tags": {
            "defaultValue": {},
            "type": "object"
        },
        "backup": {
            "defaultValue": {},
            "type": "object"
            },
        "logging": {
            "defaultValue": {
                "name": "",
                "resourceGroup": "profile-rg"
            },
            "type": "object"
        },
        "availabilitySet": {
            "defaultValue": {
                "name": ""
            },
            "type": "object"
        },
        "customData": {
            "defaultValue": {
                "script": {
                    "package_upgrade": true
                }
            },
            "type": "object"
        },
        "container": {
            "type": "object",
            "defaultValue": {
                "extensionType": ""
            }
        }
    },
    "variables": {
        "publicIpEnabled": "[if(equals(parameters('publicIp').addressSku,'None'),'Off','On')]",
        "interfaceSuffix": "[parameters('network').interfaceSuffix]",
        "publicIpAddressSuffix": "[parameters('publicIp').addressSuffix]",
        "vnetId": "[resourceId(parameters('network').resourceGroup,'Microsoft.Network/virtualNetworks', parameters('network').vnet)]",
        "subnetRef": "[concat(variables('vnetId'), '/subnets/', parameters('network').subnet)]",
        "workspace": "[resourceId(parameters('logging').resourceGroup, 'Microsoft.OperationalInsights/workspaces/', parameters('logging').name)]",
        "availabilitySetEnabled": { "id": "[resourceId(resourceGroup().name, 'Microsoft.Compute/availabilitySets', parameters('availabilitySet').name)]" },
        "customData": "[string(parameters('customData').script)]",
        "customDataBase64": "[base64(variables('customData'))]",
        "dnsSettingsDefinition": {
            "domainNameLabel": "[parameters('publicIp').addressDns]"
        },
        "countPresent": "[contains(parameters('vm'), 'count')]",
        "vmCount": "[if(variables('countPresent'), int(parameters('vm').count), 1 )]",
        "copy": [
            {
                "name": "vmNames",
                "count": "[variables('vmCount')]",
                "input": "[concat(parameters('vm').name, if(variables('countPresent'), copyIndex('vmNames', 1), ''))]"
            }
        ],
        "extensionName": "DockerExtension",
        "tagsProvided1": "[or(contains(parameters('backup'), 'profileTagName'),contains(parameters('backup'), 'profileTagValue'))]",
		"tagObject1": "[if(variables('tagsProvided1'),createObject(parameters('backup').profileTagName, parameters('backup').profileTagValue),json('{}'))]",
		"tagsProvided2": "[or(contains(parameters('backup'), 'backupTagName'),contains(parameters('backup'), 'backupTagValue'))]",
		"tagObject2": "[if(variables('tagsProvided2'),createObject(parameters('backup').backupTagName, parameters('backup').backupTagValue),json('{}'))]"
    },
    "resources": [
        {
            "name": "[variables('vmNames')[copyIndex('vmInstances',0)]]",
            "type": "Microsoft.Compute/virtualMachines",
            "copy": {
                "name": "vmInstances",
                "count": "[variables('vmCount')]"
            },
            "apiVersion": "2018-04-01",
            "location": "[parameters('vm').location]",
            "tags": "[union(variables('tagObject1'), variables('tagObject2'),parameters('tags'))]",
            "dependsOn": [
                "[concat('Microsoft.Network/networkInterfaces/', variables('vmNames')[copyIndex('vmInstances',0)], variables('interfaceSuffix'))]"
            ],
            "properties": {
                "osProfile": {
                    "computerName": "[variables('vmNames')[copyIndex('vmInstances',0)]]",
                    "adminUsername": "[parameters('user')]",
                    "adminPassword": "[parameters('password')]",
                    "customData": "[variables('customDataBase64')]",
                    "linuxConfiguration": {
                        "disablePasswordAuthentication": "[parameters('disablePasswordAuthentication')]",
                        "ssh": {
                            "publicKeys": [
                                {
                                    "path": "[concat('/home/', parameters('user'), '/.ssh/authorized_keys')]",
                                    "keyData": "[parameters('sshKeys')[0]]"
                                }
                            ]
                        }
                    }
                },
                "hardwareProfile": {
                    "vmSize": "[parameters('vm').size]"
                },
                "storageProfile": {
                    "imageReference": "[parameters('image')]",
                    "osDisk": {
                        "createOption": "fromImage",
                        "managedDisk": {
                            "storageAccountType": "[parameters('vm').storage]"
                        }
                    },
                    "dataDisks": []
                },
                "availabilitySet": "[if(equals(parameters('availabilitySet').name,''), json('null'), variables('availabilitySetEnabled'))]",
                "networkProfile": {
                    "networkInterfaces": [
                        {
                            "id": "[resourceId('Microsoft.Network/networkInterfaces', concat(variables('vmNames')[copyIndex('vmInstances',0)], variables('interfaceSuffix')))]"
                        }
                    ]
                }
            }
        },
        {
            "name": "[concat(variables('vmNames')[copyIndex('vmInstances',0)], variables('interfaceSuffix'))]",
            "type": "Microsoft.Network/networkInterfaces",
            "copy": {
                "name": "vmInstances",
                "count": "[variables('vmCount')]"
            },
            "apiVersion": "2018-04-01",
            "location": "[parameters('vm').location]",
            "tags": "[parameters('tags')]",
            "dependsOn": [
                "[concat('Microsoft.Network/publicIpAddresses/', variables('vmNames')[copyIndex('vmInstances',0)], variables('publicIpAddressSuffix'))]"
            ],
            "properties": {
                "ipConfigurations": [
                    {
                        "name": "ipconfig1",
                        "properties": {
                            "subnet": {
                                "id": "[variables('subnetRef')]"
                            },
                            "privateIPAllocationMethod": "Dynamic",
                            "publicIpAddress": "[if(equals(variables('publicIpEnabled'),'On'), createObject('id', resourceId('Microsoft.Network/publicIpAddresses/', concat(parameters('vm').name, if(variables('countPresent'), copyIndex(1), ''),variables('publicIpAddressSuffix')))), json('null'))]"
                        }
                    }
                ]
            }
        },
        {
            "condition": "[not(empty(parameters('logging').name))]",
            "name": "[concat(variables('vmNames')[copyIndex('vmInstances',0)], '/Microsoft.Insights.LogAnalyticsAgent')]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "copy": {
                "name": "vmInstances",
                "count": "[variables('vmCount')]"
            },
            "apiVersion": "2017-12-01",
            "location": "[parameters('vm').location]",
            "dependsOn": [
                "[concat('Microsoft.Compute/virtualMachines/', variables('vmNames')[copyIndex('vmInstances',0)])]"
            ],
            "properties": {
                "publisher": "Microsoft.EnterpriseCloud.Monitoring",
                "type": "OmsAgentForLinux",
                "typeHandlerVersion": "1.7",
                "autoUpgradeMinorVersion": true,
                "settings": {
                    "workspaceId": "[if(not(empty(parameters('logging').name)), reference(variables('workspace'), '2015-03-20').customerId, json('null'))]"
                },
                "protectedSettings": {
                    "workspaceKey": "[if(not(empty(parameters('logging').name)), listKeys(variables('workspace'), '2015-03-20').primarySharedKey, json('null'))]"
                }
            }
        },
        {
            "condition": "[equals(variables('publicIpEnabled'),'On')]",
            "name": "[concat(variables('vmNames')[copyIndex('vmInstances',0)], variables('publicIpAddressSuffix'))]",
            "type": "Microsoft.Network/publicIpAddresses",
            "copy": {
                "name": "vmInstances",
                "count": "[variables('vmCount')]"
            },
            "apiVersion": "2017-08-01",
            "location": "[parameters('vm').location]",
            "tags": "[parameters('tags')]",
            "properties": {
                "publicIpAllocationMethod": "[parameters('publicIp').addressType]",
                "dnsSettings": "[if(equals(parameters('publicIp').addressDns, ''), json('null'), variables('dnsSettingsDefinition'))]"
            },
            "sku": {
                "name": "[parameters('publicIp').addressSku]"
            }
        },
        {
            "condition": "[not(equals(parameters('container').extensionType,''))]",
            "type": "Microsoft.Compute/virtualMachines/extensions",
            "name": "[concat(parameters('vm').name,'/', variables('extensionName'))]",
            "apiVersion": "2019-07-01",
            "location": "[parameters('vm').location]",
            "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines/', parameters('vm').name)]"
            ],
            "properties": {
                "publisher": "Microsoft.Azure.Extensions",
                "type": "[parameters('container').extensionType]",
                "typeHandlerVersion": "1.0",
                "autoUpgradeMinorVersion": true
            }
        }
    ],
    "outputs": {
        "name": {
            "type": "string",
            "value": "[parameters('vm').name]"
        },
        "adminUsername": {
            "type": "string",
            "value": "[parameters('user')]"
        },
        "publicIP": {
            "condition": "[equals(variables('publicIpEnabled'),'On')]",
            "type": "array",
            "copy": {
                "count": "[variables('vmCount')]",
                "input": "[reference(resourceId('Microsoft.Network/publicIpAddresses/', concat(variables('vmNames')[copyIndex(0)], variables('publicIpAddressSuffix')))).ipAddress]"
            }
        },
        "webUrl": {
            "condition": "[equals(variables('publicIpEnabled'),'On')]",
            "type": "array",
            "copy": {
                "count": "[variables('vmCount')]",
                "input": "[concat('http://', reference(resourceId('Microsoft.Network/publicIpAddresses/', concat(variables('vmNames')[copyIndex(0)], variables('publicIpAddressSuffix')))).ipAddress)]"
            }
        },
        "ssh": {
            "condition": "[equals(variables('publicIpEnabled'),'On')]",
            "type": "array",
            "copy": {
                "count": "[variables('vmCount')]",
                "input": "[concat('ssh ', parameters('user'), '@', reference(resourceId('Microsoft.Network/publicIpAddresses/', concat(variables('vmNames')[copyIndex(0)], variables('publicIpAddressSuffix')))).ipAddress)]"
            }
        }
    }
}