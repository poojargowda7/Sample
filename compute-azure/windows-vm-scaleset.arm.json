{
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
  "contentVersion": "1.0.0.0",
  "apiProfile": "2018-03-01-hybrid",
  "parameters": {
    "vmssConfig": {
      "defaultValue": {
        "name": "[substring(concat('vmss', uniquestring(replace(resourceGroup().Id,'-',''))), 0, 8)]",
        "sku": "Standard_A1",
        "defaultInstance": 2,
        "minInstance": 1,
        "maxInstance": 20,
        "computerNamePrefix": "win"
      },
      "type": "object"
    },
    "adminUsername": {
      "type": "string"
    },
    "adminPassword": {
      "type": "secureString"
    },
    "osImageConfig": {
      "defaultValue": {
        "publisher": "MicrosoftWindowsServer",
        "offer": "WindowsServer",
        "sku": "2019-Datacenter"
      },
      "type": "object"
    },
    "scaleOutMetricTrigger": {
      "defaultValue": {
        "metricName": "Percentage CPU",
        "operator": "GreaterThan",
        "threshold": 85,
        "timeGrain": "PT1M",
        "timeWindow": "PT5M"
      },
      "type": "object"
    },
    "scaleOutAction": {
      "defaultValue": {
        "direction": "Increase",
        "value": "1",
        "cooldown": "PT5M"
      },
      "type": "object"
    },
    "scaleInMetricTrigger": {
      "defaultValue": {
        "metricName": "Percentage CPU",
        "operator": "LessThan",
        "threshold": 60,
        "timeGrain": "PT1M",
        "timeWindow": "PT5M"
      },
      "type": "object"
    },
    "scaleInAction": {
      "defaultValue": {
        "direction": "Decrease",
        "value": "1",
        "cooldown": "PT5M"
      },
      "type": "object"
    },
    "tags": {
      "defaultValue": {},
      "type": "object"
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "vnetName": "[toLower(concat('vnet', uniqueString(resourceGroup().id)))]",
    "subnetName": "[toLower(concat('subnet', uniqueString(resourceGroup().id)))]",
    "vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('vnetName'))]",
    "subnetRef": "[concat(variables('vnetID'),'/subnets/', variables('subnetName'))]",
    "publicIPAddressName": "[toLower(concat('pip', uniqueString(resourceGroup().id)))]",
    "vmssDomainName": "[toLower(concat('pubdns', uniqueString(resourceGroup().id)))]",
    "loadBalancerName": "[concat('LB', uniqueString(resourceGroup().id))]",
    "loadBalancerFrontEndName": "[concat('LBFrontEnd', uniqueString(resourceGroup().id))]",
    "loadBalancerBackEndName": "[concat('LBBackEnd', uniqueString(resourceGroup().id))]",
    "loadBalancerProbeName": "[concat('LBHttpProbe', uniqueString(resourceGroup().id))]",
    "loadBalancerNatPoolName": "[concat('LBNatPool', uniqueString(resourceGroup().id))]"
  },
  "resources": [
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('vnetName')]",
      "location": "[variables('location')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "10.0.0.0/16"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "10.0.0.0/24"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[variables('location')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('vmssDomainName')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName')]",
      "location": "[variables('location')]",
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "[variables('loadBalancerFrontEndName')]",
            "properties": {
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('publicIPAddressName'))]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('loadBalancerBackendName')]"
          }
        ],
        "loadBalancingRules": [
          {
            "name": "roundRobinLBRule",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/', variables('loadBalancerFrontEndName'))]"
              },
              "backendAddressPool": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/backendAddressPools/', variables('loadBalancerBackendName'))]"
              },
              "protocol": "tcp",
              "frontendPort": 80,
              "backendPort": 80,
              "enableFloatingIP": false,
              "idleTimeoutInMinutes": 5,
              "probe": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/probes/', variables('loadBalancerProbeName'))]"
              }
            }
          }
        ],
        "probes": [
          {
            "name": "[variables('loadBalancerProbeName')]",
            "properties": {
              "protocol": "tcp",
              "port": 80,
              "intervalInSeconds": 5,
              "numberOfProbes": 2
            }
          }
        ],
        "inboundNatPools": [
          {
            "name": "[variables('loadBalancerNatPoolName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[concat(resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName')), '/frontendIPConfigurations/', variables('loadBalancerFrontEndName'))]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": 50000,
              "frontendPortRangeEnd": 50019,
              "backendPort": 3389
            }
          }
        ]
      },
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ]
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "sku": {
        "name": "[parameters('vmssConfig').sku]",
        "tier": "Standard",
        "capacity": "[parameters('vmssConfig').defaultInstance]"
      },
      "name": "[parameters('vmssConfig').name]",
      "location": "[variables('location')]",
      "tags": "[parameters('tags')]",
      "properties": {
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "osDisk": {
              "caching": "ReadOnly",
              "createOption": "FromImage"
            },
            "imageReference": {
              "publisher": "[parameters('osImageConfig').publisher]",
              "offer": "[parameters('osImageConfig').offer]",
              "sku": "[parameters('osImageConfig').sku]",
              "version": "latest"
            }
          },
          "osProfile": {
            "computerNamePrefix": "[parameters('vmssConfig').computerNamePrefix]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "nic-windows",
                "properties": {
                  "primary": true,
                  "ipConfigurations": [
                    {
                      "name": "ipconfig-windows",
                      "properties": {
                        "subnet": {
                          "id": "[variables('subnetRef')]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('loadBalancerBackEndName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('loadBalancerNatPoolName'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          }
        }
      },
      "dependsOn": [
        "[concat('Microsoft.Network/virtualNetworks/', variables('vnetName'))]",
        "[resourceId('Microsoft.Network/loadBalancers', variables('loadBalancerName'))]"
      ]
    },
    {
      "type": "Microsoft.Insights/autoscaleSettings",
      "apiVersion": "2015-04-01",
      "name": "autoscalehost",
      "location": "[variables('location')]",
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachineScaleSets/', parameters('vmssConfig').name)]"
      ],
      "properties": {
        "name": "autoscalehost",
        "targetResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('vmssConfig').name)]",
        "enabled": true,
        "profiles": [
          {
            "name": "Profile1",
            "capacity": {
              "minimum": "[parameters('vmssConfig').minInstance]",
              "maximum": "[parameters('vmssConfig').maxInstance]",
              "default": "[parameters('vmssConfig').defaultInstance]"
            },
            "rules": [
              {
                "metricTrigger": {
                  "metricName": "[parameters('scaleOutMetricTrigger').metricName]",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('vmssConfig').name)]",
                  "timeGrain": "[parameters('scaleOutMetricTrigger').timeGrain]",
                  "statistic": "Average",
                  "timeWindow": "[parameters('scaleOutMetricTrigger').timeWindow]",
                  "timeAggregation": "Average",
                  "operator": "[parameters('scaleOutMetricTrigger').operator]",
                  "threshold": "[parameters('scaleOutMetricTrigger').threshold]"
                },
                "scaleAction": {
                  "direction": "[parameters('scaleOutAction').direction]",
                  "type": "ChangeCount",
                  "value": "[parameters('scaleOutAction').value]",
                  "cooldown": "[parameters('scaleOutAction').cooldown]"
                }
              },
              {
                "metricTrigger": {
                  "metricName": "[parameters('scaleInMetricTrigger').metricName]",
                  "metricResourceUri": "[resourceId('Microsoft.Compute/virtualMachineScaleSets', parameters('vmssConfig').name)]",
                  "timeGrain": "[parameters('scaleInMetricTrigger').timeGrain]",
                  "statistic": "Average",
                  "timeWindow": "[parameters('scaleInMetricTrigger').timeWindow]",
                  "timeAggregation": "Average",
                  "operator": "[parameters('scaleInMetricTrigger').operator]",
                  "threshold": "[parameters('scaleInMetricTrigger').threshold]"
                },
                "scaleAction": {
                  "direction": "[parameters('scaleInAction').direction]",
                  "type": "ChangeCount",
                  "value": "[parameters('scaleInAction').value]",
                  "cooldown": "[parameters('scaleInAction').cooldown]"
                }
              }
            ]
          }
        ]
      }
    }
  ]
}